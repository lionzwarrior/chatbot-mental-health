global
    log /dev/log    local0 notice
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
    stats timeout 30s
    user haproxy
    group haproxy
    daemon
    maxconn 4000 # Max concurrent connections (adjust based on server capacity and traffic)
    # Recommended: Enable strict mode for better parsing and error detection
    strict-limits

defaults
    log global
    mode http
    option httplog
    option dontlognull
    # For web services, http-keep-alive is generally more efficient than http-server-close
    # unless you have very specific reasons for closing connections after each request.
    option http-keep-alive # Keep connections open for multiple requests from the same client
    option forwardfor      # Add X-Forwarded-For header to pass client's IP to backends
    timeout connect 5000ms  # Max time to wait for a connection to a backend server
    timeout client 50000ms  # Max inactivity time on the client side
    timeout server 50000ms  # Max inactivity time on the server side
    retries 3               # Number of retries before marking a backend server down
    balance leastconn       # Default load balancing algorithm (overridden in specific backends)

# --- EXTERNAL FRONTENDS (Publicly Accessible) ---

frontend http_in
    bind 203.189.123.205:80 # Public IP, Port 80 for HTTP
    # IMPORTANT: Replace <yourdomain.com> with your actual domain
    redirect scheme https code 301 if { hdr(Host) -i <yourdomain.com> }
    # This default_backend is fine here, as requests not matching the redirect will be sent here.
    # If the redirect is intended to catch all traffic for the domain, it's still harmless.
    default_backend streamlit_backend

frontend streamlit_https_in
    bind 203.189.123.205:443 ssl crt </etc/ssl/certs/your_domain.pem> # Public IP, Port 443 for HTTPS
    mode http
    # Streamlit requires sticky sessions for st.session_state
    cookie SERVERID insert indirect nocache maxidle 30m maxage 1h
    default_backend streamlit_backend

# --- INTERNAL FRONTENDS (Accessible only from your private network or localhost) ---

# Ollama Llama3.1 API Frontend
frontend ollama_llama31_api_internal
    bind 172.20.20.252:11400 # HAProxy's internal IP, internal port for Llama31
    mode http
    default_backend ollama_llama31_backend

# Ollama OpenChat API Frontend
frontend ollama_openchat_api_internal
    bind 172.20.20.252:11401 # HAProxy's internal IP, internal port for OpenChat
    mode http
    default_backend ollama_openchat_backend

# MongoDB Frontend
frontend mongodb_internal
    bind 172.20.20.252:27017 # HAProxy's internal IP, default MongoDB client port
    mode tcp # <--- CRITICAL: MongoDB is a TCP protocol
    default_backend mongodb_k8s_nodes

# Qdrant Frontend
frontend qdrant_internal
    bind 172.20.20.252:6333 # HAProxy's internal IP, default Qdrant client port
    mode tcp # <--- Recommended for Qdrant (handles both REST and gRPC)
    # If you only use Qdrant's REST API and want HTTP features:
    # mode http
    # option httpchk GET /ready # Or your Qdrant health endpoint
    default_backend qdrant_k8s_nodes

# --- BACKENDS ---

backend streamlit_backend
    balance leastconn # Good for sticky sessions with potentially long-lived connections
    option httpchk GET / # Health check for Streamlit application
    # IMPORTANT: cookie values must be UNIQUE for each server for sticky sessions to work!
    # Also, replace <PORT> with the actual NodePort of your Streamlit Kubernetes Service (e.g., 30501)
    server streamlit_cn1 172.20.20.1:<PORT> check cookie streamlit_cn1_id
    server streamlit_cn2 172.20.20.2:<PORT> check cookie streamlit_cn2_id
    server streamlit_cn3 172.20.20.3:<PORT> check cookie streamlit_cn3_id

backend ollama_llama31_backend
    balance leastconn # Good for stateless APIs like Ollama
    option httpchk GET / # Health check for Ollama Llama3.1 instance
    # Ensure these IPs are your Kubernetes worker nodes' internal IPs and the port is the NodePort for Llama3.1 (31400)
    server llama31_cn1 172.20.20.1:31400 check 
    server llama31_cn2 172.20.20.2:31400 check
    server llama31_cn3 172.20.20.3:31400 check

backend ollama_openchat_backend
    balance leastconn # Good for stateless APIs like Ollama
    option httpchk GET / # Health check for Ollama OpenChat instance
    # No 'cookie' directive here, as Ollama is stateless
    # Ensure these IPs are your Kubernetes worker nodes' internal IPs and the port is the NodePort for OpenChat (31401)
    server openchat_cn1 172.20.20.1:31401 check
    server openchat_cn2 172.20.20.2:31401 check
    server openchat_cn3 172.20.20.3:31401 check

backend mongodb_k8s_nodes
    mode tcp # <--- CRITICAL: MongoDB is a TCP protocol
    balance leastconn # Or roundrobin
    # TCP health check: connect to the port
    option tcp-check
    # Check every 2 seconds, consider server down after 2 failures, up after 3 successes
    # This might need tuning based on your MongoDB's responsiveness
    # or consider a more advanced health check for MongoDB's status (e.g., using 'send'/'expect' for mongo wire protocol)
    default-server check inter 2s fall 2 rise 3

    # Point to the INTERNAL-IPs of your Kubernetes worker nodes, using the MongoDB NodePort
    server mongo_cn1 172.20.20.1:30017
    server mongo_cn2 172.20.20.2:30017
    server mongo_cn3 172.20.20.3:30017

backend qdrant_k8s_nodes
    mode tcp # <--- Recommended for Qdrant
    # If using 'mode http' in the frontend, change this to 'mode http' as well
    # and use 'option httpchk GET /ready' (or similar Qdrant health endpoint)
    balance leastconn # Or roundrobin
    default-server check inter 2s fall 2 rise 3 # Basic TCP check for mode tcp

    # Point to the INTERNAL-IPs of your Kubernetes worker nodes, using the Qdrant NodePort
    server qdrant_cn1 172.20.20.1:30033
    server qdrant_cn2 172.20.20.2:30033
    server qdrant_cn3 172.20.20.3:30033


# --- HAProxy Statistics Page (Accessible internally for security) ---
listen stats_page
    bind 127.0.0.1:6080 # Bind to localhost for most secure access (only from HAProxy server itself)
    # Or, if you need access from other internal machines:
    # bind 172.20.20.252:6080 # Bind to HAProxy's internal IP

    mode http
    stats enable
    stats uri /haproxy_stats
    stats auth admin:YOUR_SECURE_PASSWORD_HERE # <<<<<<<< CRITICAL: CHANGE THIS PASSWORD IMMEDIATELY!
    stats refresh 10s
    stats show-node